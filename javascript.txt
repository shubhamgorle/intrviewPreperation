 https://www.udemy.com/course/javascript-interview      <---- 200 javascript questions
 
 # is javascript synchronous language or asynchronous language?
 javaScript is an asynchronous and concurrent
 programming language that offers a lot of 
 flexibility. It's single-threaded like sync, 
 but also non-blocking like async.
 Although it's synchronous by nature, JavaScript benefits from asynchronous code.

concurrent---> ( when you are doing more than one thing at the same time.)

1. is null and undefined are same ?
=> null and undefined ---> null and undefined is not equal 
if we check null and undefined like this ---> null == undefined ---> we will get true bcz both are falsy values.
but if we check  null and undefined like this ---> null === undefined (Stricktly equals to)---> we will get false.


----------------------------------------------------------->

2. difference between falsy values and truthy values.
=>  falsy values is the values which is not false but its behave life false is known as falsy values.
examples of falsy values are false, NaN, null, undefined, 0, ""

eg. if(false || NaN || null || undefined || 0 || ""){
    console.log("shubham")
}
else{
    console.log("vicky")
}

output ---> vicky


=> truthy values are the values which is not true but act like true is known as truthy values.

eg. if(1){
    console.log("shubham")
}
else{
    console.log("vicky")
}

output ---> shubham

----------------------------------------------------------->

3. what is NaN (Not-A-Number)?
=> NaN is a property of the global object which value repersenting Not-A-Number.
   In other words, it is a variable in global scope.
   In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it.

eg.
function sanitise(x){
  if (isNaN(x)) {
    return NaN;
  }
  return x;
}

console.log(sanitise('1'));
// Expected output: "1"

console.log(sanitise('NotANumber'));
// Expected output: NaN

NaN == NaN -----> false
{} == {} ----->false---> because two objects have different addresses.
[] == [] ---->false

----------------------------------------------------------->

4. logical operator

5 && 2 && 0 || 2 && 3 || 15 && 21 ---> output ---> 3  ---> Because 0 is the falsy value.
5 && 2 && 0 || 2 == 3 || 15 && 21 ---> output ---> 21
5 && 2 && 0 || 2 == 3  ---> output ---> false

----------------------------------------------------------->


5. Arrays (Higher order functions);
=> forEach ---> when we want to iterate to the array and don't want to return any array then forEach is used. 
 var arr = [1, 2, 3, 4, 5];
    arr.forEach((e, i) => {
        console.log(e)
    })

   map ---> map used when we have to return the array.
  
    var brr = arr.map((e, i) =>
        e + 10
    )
    console.log(brr)

   filter ---> filter is used when we have to apply any condition and return the array.
    var brr = arr.filter((e, i) =>
        e > 2
    )
    console.log(brr)

    reduce --->  used to reduce an array to a single value by passing a callback function on each element of the array.
    var val =  arr.reduce((a,b)=>a+b)
   console.log(val)
   --->output--->   15
   OR 
   var val =  arr.reduce((a,b)=>{
    return a+b
   },0)
   console.log(val)
   --->output--->   15

----------------------------------------------------------->


6. difference between array and object in javascript.
=> array is index value pair and objects are key value pair
console.log(typeof([]) === typeof({})) ---> output is True bcz array is internally object

----------------------------------------------------------->

7. Hoisting 
=> It is the process whereas the inteprreter appears to move the declaration of functions,
 variables or classes to the top of their scope, Before execution of the code.
         eg.
                       Hoist()
                       function Hoist(){
                           console.log("Good Morning")
                       }
                       console.log(a)
                       var a;
                       a = 10
                       console.log(a)

Note :=> 1) Declaration hoisted to the top but initialisation not.
         2) Hoisting is only possible with var not with const and let.
         3) functional expression cannot hoisted.
         functional expressions are aero fuctions 
      eg.   Hoist()
             const Hoist = ()=>{
           console.log("Good Morning")
        }
         4)
         
        function data(){
        var x = 100;
            y = 10;
        }
        data();
        console.log(x,y)   
         output :=> 100,10 because if the variable is not declare and value is assign to that 
         variable in fuction then var is declare to that initialisation at the
         top of the code bydefault

----------------------------------------------------------->

8. Scopes 
:=> Scope in JavaScript refers to the current context of code, which determines the accessibility of variables to JavaScript.
1) global   :=>var   
var name = "shubham";
function data(){
    console.log(name);
    name is accessible here also    
}
var dom = "html"
name is accessible here also.

2) functional scope 
function getData(){
    var data = {
        name:"shubham"
    }
    data is accessible here 
}
    data is NOT accessible here 

3) block     :=>let,const

{
    let data = "shubham"
    data is accessible in this scope (inside the curley braces) only.
}

var is global scope while let & const are block scope.
 var can updated and redeclared within its scope.    
 let can updated but not redeclared within its scope.
 const neither updated nor redeclared within its scope.

----------------------------------------------------------->

8. Promise
:=> Promises are a way to implement asynchronous programming in JavaScript(ES6 which is also known as ECMAScript-6). 
    A Promise acts as a container for future values.
    it is use for parallel execution of code. it allow you to handle asynchronous actions 

    there are three states in promise
    pending: initial state, neither fulfilled nor rejected.
    fulfilled: meaning that the operation was completed successfully.
    rejected: meaning that the operation failed.



why ?
JavaScript is indeed an asynchronous language, which means it can handle asynchronous operations without 
blocking the execution of other code. However, the presence of promises in JavaScript is not because the 
language itself needs help in handling asynchronous operations. Instead, promises provide a way to manage
 and work with asynchronous operations in a more organized and structured manner.
 Promises provide a structured and readable way to handle asynchronous operations in JavaScript,
 improving code organization, error handling, and overall maintainability.
 
 Sequencing and Chaining Asynchronous Operations: Promises enable you to 
 sequence multiple asynchronous operations in a more readable and linear manner.
  You can chain promises using the .then() method, which allows you to specify what should
   happen when a promise is fulfilled. This chaining mechanism simplifies the process of 
   passing data between asynchronous operations and creating dependent workflows.
eg.

let myPromise = new Promise(function(resolve, reject) {
  let x = 0;
setTimeout(() => {
    if (x == 0) {
    resolve("OK");
  } else {
    reject("Error");
  }
}, 3000);
});

myPromise.then(
  function(value) {console.log(value);},
  function(error) {console.log(error);}
);

----------------------------------------------------------->

9. arrow functions 
:=>   Arrow functions were introduced in ES6.
      Arrow functions allow us to write shorter function syntax: 


var obj = {
    name:"shubham",
    data:function(){  
       setTimeout(function(){
       console.log(this)
       }, 1000);
    }
}

obj.data() ---> outpt ---> window object
      var obj = {
    name:"shubham",
    data:function(){  
       setTimeout(() => {
       console.log(this)
       }, 1000);
    } 
}

what is this in different schenario ?
=> in simple object if fuction is created using term function (without arrow fuction) & 'this' is used inside the fuction then 
'this' is that entire object. this will have the access of that enire object.

var obj1 = {
    name:"shubham",
   data: function(){
    console.log(this)
   }
}
// obj1.data(); ---> enire object 
var obj = {
    name:"shubham",
   data:(()=>{
    console.log(this)
   })
}
// obj.data();  ---> window object


inside the event eg. setTimeout, here if event is make using without arrow fuction then this will become window object. it will
not have the access of the element present inside that object.

eg. 
var obj = {
    name:"shubham",
    data:function(){  
       setTimeout(function(){
       console.log(this)
       }, 1000);
    }
}
obj.data() ---> outpt ---> window object

inside the event eg. setTimeout, here if event is make using  arrow fuction then it will
 have the access of the element present inside that object.

      var obj = {
    name:"shubham",
    data:function(){  
       setTimeout(() => {
       console.log(this)
       }, 1000);
    }
}
obj.data()    output---> object
      arrow functions use lexical this.(above example)

----------------------------------------------------------->

10)
- What is Prototype?
- What is Prototypal Inheritance?
- What is Prototype Chain?
- Why we call it _proto_ ?
- What is inhertance in Javascript? 

=> Every object in JavaScript has a built-in property, which is called its prototype.
 The prototype is itself an object, so the prototype will have its own prototype, making what's called a prototype chain. 
 The chain ends when we reach a prototype that has null for its own prototype.

Prototypes are the mechanism by which JavaScript objects inherit features from one to another.

'Prototype inheritance' in javascript is the linking of prototypes of
 a parent object to a child object to share and utilize the properties of a parent class using a child class.

child.__proto__ = parent;

let company = {
  name: "A",
  pay: function () {
    console.log("Paying");
  },
}; //company object

let worker = {
  id: 1,
  work: function () {
    console.log("Working");
  },
}; //worker object
worker.__proto__ = company; //worker object inherits company object
console.log(worker);
worker.pay(); // calling method from company object using worker object.


inheritance is one objects trying to access the methods and properties of other object.  


----------------------------------------------------------->
  
11) call, apply & bind
Call is a function that helps you change the context of the invoking function.

In layperson's terms, it helps you replace the value of this inside a function with whatever value you want.

Apply is very similar to the call function. The only difference is that in 
apply you can pass an array as an argument list.

Bind is a function that helps you create another function that you can execute later with 
the new context of 'this' that is provided.

var jethalal = {
    wife:"Daya",
    age:45,
    place:"Mumbai"
}
var bide = {
    wife:"madhvi",
    age:40,
    place:"Mumbai"
}
function PopatLal(a,b){
    console.log(this.wife + " will cook food")
console.log(a,b)
}
         // CALL
// PopatLal.call(jethalal)
        //  APPLY
// PopatLal.apply(bide,["hellow", 29])
        //  BIND
// var func = PopatLal.bind(bide,"hellow", 29);
// func()

----------------------------------------------------------->

12)classes

whatever thing  that we used to do with prototype that 
can we do with classes. it is just sugar sintaxing of prototype.

// function Rectangle(height,width){
//     this.width  = width;
//     this.height = height
// }

// Rectangle.prototype.area = function(){
//     return this.width * this.height
// }

// let box  = new Rectangle(5,10)
// console.log(box.area())

// same this we can build using classes.

// class Rectangle{
//     constructor(height,width){
//         this.height = height
//         this.width = width
//     }
//     area(){
//         return this.height * this.width
//     }
// }

// let box = new Rectangle(5,10)
// console.log(box.area());

13)bigint
=>
var num = 2**53 - 1; it is the largest value can handle in javascript

console.log(num)   ---output => 9007199254740991
console.log(num+2) ---output =>  ---output => 9007199254740991   but output should be  ---output => 9007199254740993
it is because the number exceeding the maximum allowed Number in the JavaScript.
to ovrcome this bigint came into picture.
to use bigint "{just append the n to the number}" then we will get desired output. 
var num = 2n**53n - 1n; it is the largest value can handle in javascript
console.log(num)--->output => 9007199254740991n
console.log(num+2n)---> output => 9007199254740993n

------------------------------------------------------------------->

14) what is event loop ?
    in the answer of event loop we have to answer the all below question.
    a)what is javaScript
    b)what is Call Stack
    c)Asynchronous callback
    d)Task Queue
    e)Event loop

*javaScript is a single threaded, non blocking, asynchronous concurrent language.
single threaded => one thing at a time => line by line execution of code.
* it has call stack, an event loop  and callback queue + web APIs
* V8 is the javascript runtime which has a callstack and heap
* the heap is used for memory allocation and stack holds the excecution context

 JavaScript has a runtime model based on an
 event loop, which is responsible for executing the code.

 lets take a example 

  const fun1 = ()=>{
    console.log("fun1 is starting")
    fun2()
    console.log('fun1 is ending')
}

const fun2 = ()=>{
    setTimeout(() => {
        console.log("fun2 is starting")
    }, 3000);
}
fun1()

so i want to explain event loop by using this example.
so we will see how the execution of above code takes place.

so intially fun1() will go in execution stack then console.log("fun1 is starting") will go in execution stack
and as soon as the execution of this line completed it will get pop up from execution stack. then fun2 will go in execution stack
then as in fun2 there is settimeout which comes under web api so function settimeout will go in web api and it will run in background and rest of 
code whcih is console.log('fun1 is ending') will came in call stack and after execution completed it will pop up from call stack.
now After 3 seconds the function which was in web apis will come in task queue and it will pop up from task que in sequence and then come in 
execution stack. after execution completed it will pop up from stack and then fun2 will pop up from call stack.

     or

when synchronous code is happening it goes the callstack and its start getting executed 
and whenever we find asynchronous method get recognise and then timer or callback is kept into it which web apis handle for it .
when its Done or ready or network request is completed it pushesh into the task queue.
and from task queue functions invoke to the callstack.

imp=> if callstack is not empty, then task queue does not start element to push into callstack.
once all synchronous code executed then only asynchronous code will go into call stack.

what is call stack?
=> A call stack is a mechanism for an 
   interpreter to keep track what function is currently being run
   and what functions are called from within that function, etc.

   what is Task Queue?
=> 
any JavaScript code which is scheduled to be run by the standard mechanisms.

c)Asynchronous callback
  const addButton = document.querySelector("#add")
  addButton.addEventListener("click", () => {
  console.log("You clicked #addButton")
})

The addEventListener method attaches an event handler to a DOM element.
The details of this method is not important here; all we need to know is that
the second parameter is treated as an asynchronous callback function 
which is only executed when the particular event is triggered on the target node.
So, in this case, the async callback function is called every time we click on the #add element.

what is this in javascript?
=> this refers to an object itself.
we can change the context of this using call,apply and bind function.
function, this is created on every function invoke.
arrow fuction don't have this.
for strict mode  this is undefined.
Alone, this refers to the global object/window object.


------------------------------------------------------------------------------------->

15) difference between fetch and axios ?
=> Axios and Fetch are both popular JavaScript libraries
 used for making HTTP requests in web applications.
fetch is vanilla javascript and axios is a 3rd party library.
 fetch return the promise and then we have to convert that promise into
 jason data, but axios directly return jason data we dont have to convert that data into json.

16) question related settimeout

var arr= [1,2,3,4,5];
for(var i = 0; i<arr.length; i++){
    setTimeout(() => 
        console.log(arr[i]), i*1000);
}

// In the given code snippet, the issue is related to the scoping of the variable i inside 
// the setTimeout callback function. The setTimeout function is asynchronous, meaning that 
// the callback function will execute after the specified delay, while the loop continues executing immediately.
// By the time the first callback is executed, the loop has already completed, and the value of i has reached the value arr.length. 
// At this point, arr[i] is arr[arr.length], which is undefined since the last index of the array is arr.length - 1. Therefore, 
// you are seeing "undefined" being printed.

// To fix this issue, you can use a closure to capture the value of i for each iteration. One way to achieve 
// this is by using a separate function and passing the value of i as an argument. Here's an updated version
//  of your code that should work as expected:


for (var i = 0; i < arr.length; i++) {
  setTimeout((i) => {
    console.log(arr[i]);
  }, i * 1000, i);
}
 or
 by seperate function --->

 function display(i){
    setTimeout(() => {
        console.log(arr[i]);
      }, i * 1000);
}

for (var i = 0; i < arr.length; i++) {
  display(i)
}

----------------------------------------------------->

17)Strict mode 
=>The "use strict" directive was new in ECMAScript version 5.
It is not a statement, but a literal expression, ignored by earlier versions of JavaScript.
The purpose of "use strict" is to indicate that the code should be executed in "strict mode".
With strict mode, you can not, for example, use undeclared variables.
All modern browsers support "use strict" except Internet Explorer 9 and lower:


----------------------------------------------------------->

19)Create own array object  with prototype.

function myArray(){
    this.length = 0;
} 
// push
// pop
// Map
myArray.prototype.push = function(ele){
    this[this.length] = ele
    this.length++;
    return this.length;
}

myArray.prototype.pop = function(){
    this.length--;
    var ele = this[this.length];
    delete this[this.length]
    return ele;
}
var arr = new myArray();
arr.push(10)
arr.push(20)
arr.push(30)
arr.pop()

// myArray.prototype.map()
var arrr = [2,1,3,4,5];
arrr.forEach((e)=>console.log(e+10))

---------------------------------------------------------------------------------->

20) What is  javascript ?

=> mutable means, variable which can change it's original value, immutable are those 
// In javascript there are two major datatypes.
// 1.primitive  ---> string, number, boolean, null, undefined   ---> immutable
// data is directly store in memory location where variable exist.
// 2.reference  --->  array & object   ---> mutable
// data is stored pointer to allocation in memory where object is stored.
let x = 20   
let y = x;  
// it is immutable because value of x is not changing by changing the value of y.
console.log(x)
console.log(y+1)

let a1 = [1,2,3]
// let a2 = a1; its mutable because by changing the value of a2, value of a1 is changing. to overcome it we can use spread operator.
let a2 = [...a1]
a2.pop();
console.log(a1)
console.log(a2)


let obj1 = {
    name:"Shubham",
    age:22,
    place:"nagpur"
}
// let obj2 = obj1; its mutable because by changing the value of obj2, value of obj1 is changing. to overcome it we can use spread operator.
let obj2 = {...obj1}
obj2.color = "brown"
console.log(obj1)
console.log(obj2)

<--------------------------------closure------------------------------------------>

what are closures ?
why do we need to use them ?
what is currying ?
applications ?

what are closures ?
=> A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).
   In other words, a closure gives you access to an outer function's scope from an inner function. In JavaScript, closures are created every time a 
   function is created, at function creation time.


var name = "shubham"
function fun1(){
     name = "vicky"
     function fun2(){
        console.log('good morning', name)
     }
     name = "suraj"
     return fun2
}

let c = fun1();
c()  ---> o/p suraj 

// function outer(){
//     var a=10;
//*     return function inner(b){
//         return a+b;
//     }
// }
//* var cdn =  outer();
//* console.log(cdn(10)) ;

what is currying ?
=> transforms a functions with multiple arguments into 
a nested series of functions, each taking a single
 argument.

 function outer(a){
    return function inner(b){
        return a+b
    }
}
console.log(outer(10)(20))

---------------------------------------------------->

debouncing ?
=> It ensures that a function is only executed after a
 specified period of inactivity.
 
If user click two times and request time of first request not complete yet then it shoud cancel the first request.
Debouncing in JavaScript is a practice used to improve browser performance.

eg.

const makeApiCall = ()=>{
    console.log("Api call started")
}

const debouncer = (delay,makeApiCall)=>{
    var debouncing;
    return function(){
    debouncing && clearTimeout(debouncing)
    debouncing = setTimeout(()=>{
         makeApiCall.apply(this,arguments)
   },delay)
  }
}

var btn = document.getElementById("click");
btn.addEventListener("click",debouncer(3000, makeApiCall))



Note :=> 
 Debouncing is a technique used in JavaScript to improve
 performance and optimize the execution of event 
 handlers. 



No matter how many times you click the click me button,
I get executed after 3 seconds of inactivity.

 Application :=> Debouncing can be applied in implementing 
 suggestive text, where we wait for the user to stop
 typing for a few seconds before suggesting the text.


 ----------------------------------------------------->

what is Throttling ?
:=>Throtlling is useful when you want to ensure that a function
is called at a limited rate without missing any important inpt/events.

it call the function after fix interval of time if event is firing.


eg.
const makeApiCall=()=>{
    console.log("API call in progress");
}
const throtller = (func,delay)=>{
    let lastcall=0;
    return function(){
        if(Date.now() - lastcall > delay){
            lastcall=Date.now();
            func.apply(this,arguments)
        }
    }
}

window.addEventListener('load',function(){
    var btn = document.getElementById("click");
    btn.addEventListener("click",throtller(makeApiCall,1000))
})

-------------------------------------------------------------------------->


                                <------ES6----->

destructuring ?
:=> 
object and Arrays destructuring 
// Destructuring
// array and object destructuring

// var person = {
//     name: "masai",
//     id: '000',
//     location: "INDIA"
// }
// // before es6
// const name=person.name 
// // after es6
// const {name,id} = person  --->   destructuring
// console.log(name)


// function getData(){
//     return person
// }

// const {name,id} = getData();
// console.log(name,id)

// Array destruturing

// const arr = ['masai','india','bangluru'];


// before es6
// const name = arr[0];
// const + = arr[1];
// const city = arr[2];
// console.log(name)
// console.log(country)
// console.log(city)

// after ES6

// const [name,country,city] = arr;   --->   destructuring
// console.log(name)
// console.log(country)
// console.log(city)




// <--------------------default values------------------>

// before ES6
// function allSubjects(maths,english,science){

// return maths+english+science
// }

// let total = allSubjects(50,60);
// console.log(total) --->NaN
// to avoid this before ES6

// function allSubjects(maths,english,science){
// maths =  maths || 0
// english =  english || 0
// science =  science || 0
// return maths+english+science
// }

// let total = allSubjects(50,60);
// console.log(total)  ---> output is 110


// AFTER ES6

// function allSubjects(maths,english,science=0){
//      return maths+english+science
// }
    
//     let total = allSubjects(50,60);
//     console.log(total)  ---> output is 110




<-----
// Template literals are enclosed by the back-tick ( ``) or grave accent
// character instead of double or single quotes

// before ES6

let fname = 'masai';-------------------Template literals---------------------->

// Template literals are string literals that allow you to embed expressions
//  and values within strings.
let lname = 'school'
// let str = fname+' '+lname

// after ES6
let str = `${fname} ${lname}`
console.log(str)


*) garbage collector 
:=> garbage collector is the process of freeing up memory by removi ng unUsed code.
A automatic memory management that relieves you from doing memory management. it destroye those object which are of no use now.

differenec between while and do while loop 

whie                                                                                      do-while
Condition is checked first then statement(s) is executed.         Statement(s) is executed atleast once, thereafter condition is checked.

It might occur statement(s) is executed zero times,               At least once the statement(s) is executed.
 If condition is false.
