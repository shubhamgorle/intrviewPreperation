jorden walke        
<--------------------------------------------------------- Hooks --------------------------------------------------------->


1. what is useEffect hook ?

:=> The useEffect hook allows you to perform side effects in functional components.
    Some examples of side effects are: fetching data,
    directly updating the DOM, and timers.
    useEffect accepts two arguments. The second argument is optional.
    useEffect(<function>, <dependency>)

    cleanup function in useeffect :=> return () => {}. 
    This cleanup function will be executed when the component unmounts or effect run twice.
    In the cleanup function, we can perform cleanup tasks, such as cancelling pending
    requests, clearing intervals, etc.


2. What are the different ways to apply useEffect?

:=>    useEffect(() => {
               //Runs on every render
               });

               useEffect(() => {
               //Runs only on the first render
               }, []);

               useEffect(() => {
               //Runs on the first render
               //And any time any dependency value changes
               }, [prop, state]);


15. What are dependencies in useEffect?

 :=> In the useEffect hook in React, the dependencies are an optional second argument that you 
     can provide to the hook. Dependencies are used to control when the effect runs.
     The effect will be re-run whenever any of the values in the dependencies array change between renders.


12. What is memoisation in react?

:=> it is a technique of optimizing rendering performance of component. 
    When a component is wrapped with React.memo(), React will automatically check whether 
    the component's props have changed since the last render. If the props are the same, the cached 
    result of the previous render is returned, and the component is not re-rendered.
    It prevents unnecessary re-renders of a component when its props haven't changed.


13. What is the difference between react.memo and react.useMemo?
                                                                   |   
React.memo:

React.memo is a higher-order component that you can use to optimize the rendering performance of functional components.
When a component is wrapped with React.memo(), React will automatically check whether 
the component's props have changed since the last render. If the props are the same, the cached 
result of the previous render is returned, and the component is not re-rendered.
It prevents unnecessary re-renders of a component when its props haven't changed.
It doesn't affect the internal logic or calculations within the component; it only focuses on whether 
the component should be re-rendered based on its props.

         const ExpensiveComponent = React.memo(({ value }) => {
  // ...
  return <div>{value}</div>;
});

React.useMemo is a hook that allows you to memoize the result of a computation within a functional component.
It takes a function and an array of dependencies as arguments. The result of the function is cached and only 
recalculated if the dependencies change.
Useful for avoiding the repeated calculation of values in components.
It doesn't affect the re-rendering of the component directly; rather, it optimizes the internal calculations within the component.


const SomeComponent = ({ array }) => {
  const processedArray = React.useMemo(() => {
    // Some expensive array processing based on 'array'
    return array.map(item => item * 2);
  }, [array]);

  // ...
};
17. What is useCallback?
    :=> The React useCallback Hook returns a memoized callback function.
 note:- The `useCallback` and useMemo Hooks are similar. The main difference is that useMemo 
        returns a memoized value and useCallback returns a memoized function. 
import React, { useState, useCallback } from 'react';

function ParentComponent() {
  const [count, setCount] = useState(0);

  // Without useCallback, ChildComponent would re-render on each ParentComponent render
  const increment = useCallback(() => {
    setCount(count + 1);
  }, [count]);

  return (
    <div>
      <p>Count: {count}</p>
      <ChildComponent increment={increment} />
    </div>
  );
}

function ChildComponent({ increment }) {
  console.log('ChildComponent rendering');
  return (
    <button onClick={increment}>
      Increment Count in ParentComponent
    </button>
  );
}
   In this example, the increment function is memoized using useCallback.
   Without useCallback, the increment function would be recreated on each render
   of the ParentComponent, causing unnecessary re-renders of the ChildComponent.
   With useCallback, the increment function will only be recreated if the count 
   state changes, optimizing performance.
    
19. When do you use useReducer vs useState?

:=> useState:
useState is a simpler hook and is used for managing local state in a component.
It's great for managing straihgtforward, independent pieces of state.
Use useState when the state transitions are straightforward and don't involve complex logic or dependencies between different state variables.
For example, managing the state of a toggle, input field, or a counter is well-suited for useState.

import React, { useState } from 'react';

function Counter(){
  const [count, setCount] = useState(0);
  const increment = () => {
    setCount(count + 1);
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
}


useReducer:
when state management become hard to manage with the usestate then usereducer come into picture.
useReducer is a more advanced hook and is used for managing more complex state logic.

import React, { useReducer } from 'react';

const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    default:
      throw new Error();
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);

  const increment = () => {
    dispatch({ );
  };

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
}

  In summary, use useState for simple state management, and switch to useReducer when your
  state management logic becomes complex or when you need more control over how state updates 
  are handled. While useReducer can offer more structure and predictability for larger and more 
  intricate components, it might be overkill for simpler scenarios where useState is sufficient.

16. What are useRefs? What are some usecases?
:=> The useRef Hook allows you to persist values between renders.
    It can be used to store a mutable value that does not cause a re-render when updated.

   import {useRef,useState,useEffect} from 'react'

function App(){
  const [inputValue, setInputValue] = useState("");
  const count = useRef(0);
   var count1 = 0;
   useEffect(() => {
    count.current = count.current + 1;
    count1 = count1 + 1;
  });

  return (
        <div className="App">
          <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <h1>Render Count: {count.current}</h1>
        </div>
      );
}
export default App;

<--------------------------------------------------------- contextApi --------------------------------------------------------->
18. How does Context API work? What does it solve?
:=>  The Context API is a feature in React that provides a way to share data.
     is used to pass global variables anywhere in the application.
     It's designed to solve the problem of "prop drilling," which occurs when we need to share state between lot of nested components.
     
Context Provider: This component holds the shared data that you want to make accessible to other components.
                  It is usually placed at a higher level in the component tree, near the root of your application. The Context Provider
                  exposes a value that can be accessed by any component within its subtree.

Context Consumer: This component allows components to subscribe to the data provided by the Context Provider. 
                  It can access the data and use it within its render function. The Context Consumer helps in avoiding the need to pass 
                  props down the component tree.


34. what is the difference between contextApi and redux.  
  contextApi                                                                  redux
The Context API is a feature in React                               Redux is a popular state management library 
that provides a way to share data.                                  for building JavaScript applications.

sharing data and methods throughout component tree without props.   centralise state management for complex applications    

the main difference between contextApi and redux is that in contextApi if we store the data in root of the component 
we can access that data in any component but we can't store the new data from any component. we can only store the data in the component 
where we have created the context and pass the values in contextProvider. but in redux we can access the data from any component and we can add 
the data to store from any component.





     
<--------------------------------------------------------- Routing --------------------------------------------------------->

14. How does Routing work with react?
:=>  React itself doesn't provide built-in routing capabilities,
     but there are popular third-party libraries that simplify the implementation of routing in React applications. 
     One of the most commonly used routing libraries is react-router-dom.

     npm install react-router-dom

     first we have to wrap the index.js inside the <brouserRouter> component.
     after that the Route components are used to define what component should be rendered based on the URL.
     You can use the Link component from react-router-dom to create links that navigate between different routes.

<--------------------------------------------------------- Redux --------------------------------------------------------->

22. What is redux?
:=> Redux is a popular state management library for building JavaScript applications, 
    particularly those using React. It provides centralized way to manage and update
    the application state.
    Redux follows the principles of the Flux architecture 


25. What are actions?
:=> In Redux, actions are plain JavaScript objects that represent the intention to change 
    the state of the application. Actions describe what happened in an application and provide the
    necessary information to update the state accordingly.


24. What are reducers in redux?
 :=> In Redux, reducers are pure functions responsible for specifying how the application's state 
     changes in response to dispatched actions. They take the current state and an action as input,
     and then produce a new state based on the action's description.

// src/redux/reducers.js
const initialState = {
  counter: 0,
};

const rootReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, counter: state.counter + 1 };
    case 'DECREMENT':
      return { ...state, counter: state.counter - 1 };
    default:
      return state;
  }
};

export default rootReducer;


27. What all does a store do?
:=>     Stores are responsible for holding the application's state and business logic. 
        They register with the dispatcher to receive actions and update their state accordingly. 

Holding State: The store holds the current state of the application. 
This state includes all the data that the application needs to function,
 organized into a single JavaScript object known as the state tree.

Dispatching Actions: The store provides the dispatch method, which 
is used to send actions to the reducers. When an action is dispatched,
 the store forwards it to the relevant reducer(s), triggering the state update process.


28. What are combine reducers in Redux?
:=> combineReducers is a utility function provided by redux that allows you to combine multiple 
    reducer functions into a single reducer function. It's commonly used to manage different slices
    of state in a Redux application, making it easier to organize and scale your state management logic.


23. Explain the flow of redux?
:=> redux is used to manage states globaly.
Redux is a state management library for JavaScript 
commonly used with React. 
It maintains a centralized global state store where all application data resides. 
                                                                    
The flow begins with UI components dispatching actions, where we use dispatch which take function action as a argument which return 
type of action and some payload then These actions are then processed by pure reducer functions, which produce a new state by 
applying the action's changes to the current state. The updated state is then stored in the store.

dispatch(action) action return type and payload---> which if processed mby reducer -- reducer --> checks type of action --> update the state --->
updated state stored inside the store 
we can use react-redux library for getting data from store or we can get data by using redux


21. What is flux architecture in react?
:=> 
 Flux is an architectural pattern that was introduced by Facebook for managing the flow of data in applications. 
 It was designed to address the challenges of managing complex state and data flow
 within the components of a React application. The Flux architecture is characterized by its unidirectional data 
 flow and clear separation of concerns.

The Flux architecture consists of several key components that work together to manage application state and data flow:

Dispatcher: The central hub of the Flux architecture. It receives actions from various sources,
            such as user interactions or API responses, and then dispatches these actions to registered stores. 
           
Actions: Actions are plain JavaScript objects that represent events or user interactions. 
         They contain a type that describes the action and often carry additional data required to
         update the application state. Actions are created by action creators and are dispatched to the dispatcher.

Stores: Stores are responsible for holding the application's state and business logic. 
        They register with the dispatcher to receive actions and update their state accordingly. 
        Stores manage specific slices of the application state and ensure that updates are performed in a controlled manner.

Views (React Components): React components represent the user interface of the application. 
                          They receive data from stores and render based on the current state. When an action is dispatched
                          and the store's state changes, views automatically re-render to reflect the updated data.


<--------------------------------------------------------- Explain with example --------------------------------------------------------->
20. How do you use Profiler?
:=> In the context of React applications, profiling tools are used to analyze and optimize the performance of your components
    and the overall application. React includes a built-in tool called the "React Profiler" that allows you to gather performance data
    and identify performance bottlenecks. Here's how you can use the React Profiler.

import React, { Profiler } from 'react';

function MyComponent() {
  const onRender = (id, phase, actualDuration, baseDuration, startTime, commitTime) => {
    console.log(`Component ${id} took ${actualDuration}ms to render.`);
  };

  return (
    <Profiler id="MyComponent" onRender={onRender}>
      {/* Your component's JSX */}
    </Profiler>
  );
}

 In this example, every time the wrapped components are rendered, the onRenderCallback
 function will be called, and you'll see output in the console showing information about the rendering performance.


29. What does lazy loading mean?
:=> it is the technique used to optimize 
    the performance of web applications by loading resources, such as
    components or assets, only when they are actually needed. This is 
    particularly useful for large applications where loading all resources
    upfront could lead to longer initial loading times and increased memory usage.


eg.
import React, { Suspense } from 'react';

const 
 = React.lazy(() => import('./LazyComponent'));

function App() {
  return (
    <div>
      <Suspense fallback={<div>Loading...</div>}>
        <v/>
      </Suspense>
    </div>
  );
}

<--------------------------------------------------------- Basic questions --------------------------------------------------------->
3. What is React?         
:=> ReactJS is an open-source JavaScript library used for building user interfaces (UIs) for web applications.
8. why we are using react ?
:=> we are using React because it offers efficient UI rendering, promotes code reusability, Unidirectional data flow,
    provides a clear and declarative way to describe UIs, has a supportive community, and is backed by a
    powerful ecosystem of tools and libraries. These factors collectively make React a strong choice for
    building modern and interactive web applications.

4. what are the features of react ?
:=> A. "Component-Based Architecture" : React encourages developers to break down the user interface into reusable components.
                                        once we build component they we can reuse it wherever we want in entire application.
  
    B. "Virtual DOM" : React uses a virtual representation of the actual DOM. When changes occur in the state of a component,
                       React 'computes' the difference (diff) between the virtual DOM and the real DOM and then updates only the necessary 
                       parts of the real DOM. This approach improves performance by minimizing direct manipulation of the actual DOM.

     c. JSX : JSX (JavaScript XML) is a syntax extension that allows you to write HTML-like code within JavaScript. 
              JSX gets transpiled into JavaScript before being executed by the browser.

     D. Unidirectional Data Flow :   Parent components pass data down to child components via props. 
                                     When child components need to communicate changes back to the parent, 
                                     they do so by invoking callback functions provided by the parent.

     E. Component Lifecycle Methods (or Hooks) : React components have lifecycle methods (in class components) or hooks (in functional components)
                                                 that allow developers to run code at specific points in a component's lifecycle, such as 
                                                 when it is created, updated, or destroyed. This helps manage side effects, data fetching,
                                                 and state changes effectively.    
 
5. what is react fiber?
:=>  React Fiber is a concept of ReactJS that is used to render a system faster and smoother.  

6. what is reconciliation in react ?
:=> it is the process to determine which parts of the UI need to be updated.
    The reconciliation process involves comparing the current structure of the virtual DOM (a representation of the UI in memory) 
    with the previous version of the virtual DOM. Based on this comparison, React identifies the minimal set of changes required 
    to bring the UI in line with the updated state.

7. what is Diffing algorithm ?
:=> it is the algorithm use to compares the new virtual DOM representation with the previous one.
    It traverses both virtual DOM trees and identifies differences between the two.   

Entire flow --->
Initial Render : When a component is first rendered or updated, React creates a virtual DOM representation of the UI. This virtual 
                DOM is a lightweight copy of the actual DOM that resides in memory.

New State/Props : When the state or props of a component change, React generates a new virtual DOM representation based on the updated data.

Diffing : React then compares the new virtual DOM representation with the previous one using the diffing algorithm.
         It traverses both virtual DOM trees and identifies differences (changes) between the two.

Minimal Changes : The goal of the diffing algorithm is to find the minimal set of changes needed to update on actual DOM to match 
                  the new virtual DOM. This involves identifying additions, deletions, and updates of DOM nodes.


         real dom ---->  vertual dom 
             update real  dom      ----> new vertual dom 



    

9. what is conditional rendering ?
:=> It allows you to render different content or components based on certain conditions. 
function App() {
  const isLoggedIn = true;

  return (
    <div>
      {isLoggedIn ? <WelcomeUser /> : <LoginButton />}
    </div>
  );
}   

10. What is Lifecycle Diagram ?
:=> The series of event that happens from mounting of react component to its unmounting.
    Mounting :- Birth of your component.
    update   :- Grouth of your component.
    unmounting :- death of your component.


11. What are keys in React?
:=>  A “key” is a special attribute we need to include when creating lists of elements in React.
     Keys are used to give an identity to the elements in the lists.
     Keys are used to identify which items in the list are changed, updated, or deleted.

     const MyList = ({ items }) => {
  return (
    <ul>
      {items.map(item => (
        <li key={item.id}>{item.name}</li>
      ))}
    </ul>
  );
};


26. what are side effects in reactjs
:=> Data Fetching, DOM Manipulation, Subscriptions and Event Listeners, Timers and Intervals.
Side effects in React are often associated with the useEffect hook, 
which is used to manage and control these behaviors in functional components.


30. What does webpack do?
:=> webpack is a static module bundler for javascript applications.
    it take all code from your application and make it usable in a web browser.
    Webpack typically uses Babel as a loader to transpile JSX and ES6/ES7 JavaScript into standard JavaScript.


31. What does babel do?
:=> Babel is a toolchain that is mainly used to convert JSX and ES6/ES7 JavaScript into standard JavaScript.

32. Can you write react without jsx?
:=> Yes, you can write React applications without using JSX, although JSX is a widely 
    adopted and more convenient way to define React components. JSX is a syntax extension
    that allows you to write HTML-like markup directly within your JavaScript code, making 
    easier to visualize the component structure. However, React itself doesn't require JSX;
    it can be used with plain JavaScript as well.


33. What is SSR and CSR?
:=>  websites are loaded on browser based on html, css, js
     files whose Data are fetch from the server.
     our system which is the cliet side of transaction
     loads up the websites by rendering these files togather.  


 client side rendering :=> In client side rendering as the name suggest browser renders all the data
 in the html file on the client side.
 to explain in detail the server sends a basic skeleton of html file along with 
 all css properties and javascript Functions one by one seperately. on client side the browser 
  first receives the html file and loads it up with css file which is receive right after but js 
 function take much longer to be download so depending on the size of javascript functions which support
 different functionality of the website loading time of browser increases accordingly. 
 DYNAMIC WEBSITES
 IT PREFFERED WHEN WE HAVE LARGE AAMOUNT OF USERS 
 react js and vue js follow client side rendering and next js and nuxt js follow server
 side rendering but also supports client side rendering.


Server side rendering :=> in case of SERVER SIDE RENDERING before sending the html document to the client the server re-render 
all the css properties and javascript functions inside full flage hmtl document to display the website.
STATIC WEBSITES
THIS IS BECAUSE EVERY TIME USER RELOADS THE PAGE THE SERVER HAS TO REBUILD THE WHOLE HTML DOCUMENT AND 
SEND IT TO CLIETN SIDE WHICH TAKE MUCH MORE TIME IF DONE REPEATEDLY.
 ---> WEB APP WITH LESS USER OR LESS INTERACTIVITY.

